[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://bul8ckqb27oyb"]

[ext_resource type="Texture2D" uid="uid://cdwedohji44jw" path="res://exp/exp.png" id="1_nhnoa"]

[sub_resource type="Shader" id="Shader_h5sl6"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_toon, specular_disabled, unshaded;

uniform sampler2D texture_albedo : source_color, filter_nearest, repeat_enable;

vec3 palette(float t)
{
    vec3 a = vec3(0.5, 1.0, 0.5);
    vec3 b = vec3(0.5);
    vec3 c = vec3(1.0);
    vec3 d = vec3(0.0, 0.333, 0.667);
    
    return a + b*cos( 6.28318*(c*t+d) );
}

void vertex() {
	// Billboard Mode: Particles
	mat4 mat_world = mat4(
			normalize(INV_VIEW_MATRIX[0]),
			normalize(INV_VIEW_MATRIX[1]),
			normalize(INV_VIEW_MATRIX[2]),
			MODEL_MATRIX[3]);
	mat_world = mat_world * mat4(
			vec4(cos(INSTANCE_CUSTOM.x), -sin(INSTANCE_CUSTOM.x), 0.0, 0.0),
			vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),
			vec4(0.0, 0.0, 1.0, 0.0),
			vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = VIEW_MATRIX * mat_world;
	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);
}

void fragment() {
	vec2 centered_uv = UV * 2.0 - 1.0;
	
	vec3 col = palette(TIME);
	
	vec4 albedo_tex = texture(texture_albedo, UV);
	ALBEDO = col;
	ALPHA *= albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = 0.5;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_h5sl6")
shader_parameter/texture_albedo = ExtResource("1_nhnoa")
